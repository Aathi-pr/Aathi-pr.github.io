const themes = {
  matrix: {
    primary: "#00ff00",
    background: "#000000",
    font: "#ffffff",
    highlight: "#00ffff",
  },
  cyberpunk: {
    primary: "#ff00ff",
    background: "#1a1a1a",
    font: "#00ffff",
    highlight: "#ff00aa",
  },
  retro: {
    primary: "#ffa500",
    background: "#2b2b2b",
    font: "#ffffff",
    highlight: "#ffd700",
  },

  futuristic: {
    primary: "#00ffcc",
    background: "#001f3f",
    font: "#e0e0e0",
    highlight: "#ff6600",
  },
};

const commands = {
  help: {
    description: "Show available commands",
    response: [
      "Available Commands:",
      "━━━━━━━━━━━━━━━━━",
      "help        - Show this help message",
      "about       - About me",
      "skills     - My technical skills",
      "projects   - View my projects",
      "experience - View my journey through projects and learning",
      "education  - My educational background",
      "contact    - How to reach me",
      "clear      - Clear terminal",
      "theme      - Change theme (try 'theme matrix / theme cyberpunk / theme retro / theme futuristic')",
      "",
      "Type any command to continue...",
    ],
  },
  about: {
    description: "About me",
    response: [
      "━━━ About Me ━━━",
      "",
      "👋 Hi, I'm Adithyan PR!",
      "",
      "💻 A Developer",
      "🌍 Based in Kerala",
      "🚀 Passionate about building web applications",
      "🎯 Focused on creating elegant solutions",
      "",
      "I specialize in developing modern web applications",
      "with a focus on performance and user experience.",
      "",
      "Type 'skills' to see my technical expertise!",
    ],
  },
  skills: {
    description: "My technical skills",
    response: [
      "━━━ Technical Skills ━━━",
      "",
      "Frontend:",
      "  • Flutter",
      "  • HTML5 / CSS3",
      "",
      "Backend:",
      "  • Python / Django",
      "  • RESTful APIs",
      "",
      "Database:",
      "  • PostgreSQL",
      "  • MySQL",
      "",
      "DevOps:",
      "  • Git",
    ],
  },
  projects: {
    description: "View my projects",
    response: [
      "━━━ Featured Projects ━━━",
      "",
      "1. TukTukGo",
      "   • Description: Auto Booking Platform",
      "   • Tech: HTML5, CSS3, JS, Python, Django",
      "   • Link: https://tuktukgo.pythonanywhere.com",
      "",
    ],
  },

  education: {
    description: "My Educational background",
    response: [
      "━━━ Educational Background ━━━",
      "",
      "1. Bachelor of Computer Application",
      "   • Institution: K.V.V.S College of Science and Technology",
      "   • Year: 2022 - 2025",
      // "   • Highlights: Graduated with honors, specialized in Artificial Intelligence",
      "",
    ],
  },

  experience: {
    description: "View my journey through projects and learning",
    response: [
      "━━━ Projects & Learning Journey ━━━",
      "",
      "1. TukTukGo: Auto Booking Platform",
      "   • Role: Project Lead",
      "   • Tech: HTML5, CSS3, JS, Python, Django",
      "   • Link: https://tuktukgo.pythonanywhere.com",
      "   • Highlight: Built a user-friendly platform for auto-rickshaw bookings.",
      "",
      "2. adithyan-pr.web.app [My Portfolio]: Personal Portfolio Website",
      "   • Role: Developer & Designer",
      "   • Tech: HTML5, CSS3, JS",
      "   • Link: https://adithyan-pr.web.app",
      "   • Highlight: Showcased my skills and projects in a modern, interactive design.",
      "",
    ],
  },

  contact: {
    description: "Contact information",
    response: [
      "━━━ Contact Me ━━━",
      "",
      "📧 Email: adithyanpr0001@gmail.com",
      "🔗 LinkedIn: https://www.linkedin.com/in/adithyan-p-r-84328a238/",
      "🐙 GitHub: github.com/Aathi-pr",
      "🌐 Website: adithyan-pr.web.app",
      "",
      "Feel free to reach out for collaboration",
      "or just to say hi!",
    ],
  },

  clear: {
    description: "Clear terminal",
    response: [],
  },
  theme: {
    description: " theme matrix, theme cyberpunk, theme retro, theme futuristic"
  },
};

class Terminal {
  constructor() {
    this.outputDiv = document.getElementById("output");
    this.inputArea = document.querySelector(".input-area");
    this.terminalContainer = document.getElementById("terminal-container");
    this.history = [];
    this.historyIndex = -1;
    this.isTyping = false;
    this.typeSpeed = 30;
    this.lineSpeed = 500;
    this.konamiSequence = [];
    this.setupEasterEggs();
    this.init();
  }

  setupEasterEggs() {
    const easterEggs = {
      konami: () => this.triggerKonamiCode(),
    };

    Object.keys(easterEggs).forEach((cmd) => {
      commands[cmd] = {
        description: "???",
        response: [],
        execute: easterEggs[cmd],
      };
    });

    document.addEventListener("keydown", (e) => {
      this.checkKonamiCode(e.key);
    });
  }

  // Konami Code Implementation
  checkKonamiCode(key) {
    const konamiCode = [
      "ArrowUp",
      "ArrowUp",
      "ArrowDown",
      "ArrowDown",
      "ArrowLeft",
      "ArrowRight",
      "ArrowLeft",
      "ArrowRight",
      "b",
      "a",
    ];

    const mappedKey = key.toLowerCase();
    const expectedKey = konamiCode[this.konamiSequence.length];

    if (mappedKey === expectedKey.toLowerCase()) {
      this.konamiSequence.push(mappedKey);
      if (this.konamiSequence.length === konamiCode.length) {
        this.triggerKonamiCode();
        this.konamiSequence = [];
      }
    } else {
      this.konamiSequence = [];
    }
  }

  // Konami Code Effect
  async triggerKonamiCode() {
    const terminal = document.getElementById("terminal-container");
    terminal.style.animation = "rainbow 2s linear infinite";

    // Play sound effect
    const sound = new Audio("powerup.wav");
    sound.volume = 0.2;
    sound.play().catch(() => {});

    const style = document.createElement("style");
    style.textContent = `
            @keyframes rainbow {
                0% { border-color: #ff0000; }
                17% { border-color: #ff00ff; }
                33% { border-color: #0000ff; }
                50% { border-color: #00ffff; }
                67% { border-color: #00ff00; }
                83% { border-color: #ffff00; }
                100% { border-color: #ff0000; }
            }
        `;
    document.head.appendChild(style);

    await this.typeText("🎮 Konami Code Activated! 🎮", "success");
    await this.typeText("Unlimited Power!", "success");

    setTimeout(() => {
      terminal.style.animation = "";
    }, 5000);
  }

  init() {
    this.setupEventListeners();
    this.initMatrixRain();
    this.welcomeMessage();
  }

  // Add this new method for error handling
  showError(message) {
    this.terminalContainer.classList.add("error-shake");
    this.inputArea.classList.add("error-highlight");

    // Play error sound
    const errorSound = new Audio("assets/windows-error-sound-effect-35894.mp3"); // Add your error sound file
    errorSound.volume = 0.2;
    errorSound.play().catch(() => {});

    setTimeout(() => {
      this.terminalContainer.classList.remove("error-shake");
      this.inputArea.classList.remove("error-highlight");
    }, 500);

    return this.typeText(message, "error");
  }

  async welcomeMessage() {
    const welcomeMessages = [
      "Welcome!",
      "Type 'help' to see available commands.",
      "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━",
    ];

    for (const msg of welcomeMessages) {
      await this.typeText(msg, "success");
      await this.delay(this.lineSpeed / 2);
    }
  }

  async typeText(text, type = "normal") {
    const line = document.createElement("div");
    line.className = `output-line ${type}`;
    this.outputDiv.appendChild(line);

    for (let i = 0; i < text.length; i++) {
      const char = document.createElement("span");
      char.className = "typed-char";
      char.textContent = text[i];
      line.appendChild(char);
      await this.delay(this.typeSpeed);
      this.playTypeSound();
    }

    this.scrollToBottom();
  }

  playTypeSound() {
    const audio = new Audio(
      "assets/1687569402mixkit-fast-double-click-on-mouse-275.wav",
    );
    audio.volume = 0.1;
    audio.play().catch(() => {});
  }

  initMatrixRain() {
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    setInterval(() => {
      if (Math.random() < 0.1) {
        // Control rain density
        const el = document.createElement("span");
        const x = Math.random() * window.innerWidth;
        const char = characters[Math.floor(Math.random() * characters.length)];

        el.className = "matrix-character";
        el.style.left = x + "px";
        el.textContent = char;
        document.body.appendChild(el);

        setTimeout(() => {
          if (document.body.contains(el)) {
            document.body.removeChild(el);
          }
        }, 10000);
      }
    }, 50);
  }

  async processCommand(cmd) {
    // if (!this.isPowered) return;
    if (this.isTyping) return;

    const trimmedCmd = cmd.trim().toLowerCase();
    if (trimmedCmd === "") return;

    this.history.push(trimmedCmd);
    this.historyIndex = this.history.length;

    await this.typeText(`visitor@portfolio:~$ ${cmd}`);

    if (trimmedCmd === "clear") {
      this.outputDiv.innerHTML = "";
      return;
    }

    if (commands[trimmedCmd]) {
      this.isTyping = true;
      const response = commands[trimmedCmd].response;

      for (let i = 0; i < response.length; i++) {
        await this.typeText(response[i]);
        if (i < response.length - 1) {
          await this.delay(this.lineSpeed / 2);
        }
      }
      this.isTyping = false;
    } else if (trimmedCmd.startsWith("theme ")) {
      const themeName = trimmedCmd.split(" ")[1];
      if (themes[themeName]) {
        changeTheme(themeName);
        await this.typeText(`Theme changed to ${themeName}`, "success");
      } else {
        await this.showError(
          `Theme '${themeName}' not found. Available themes: matrix, cyberpunk, retro, futuristic`,
        );
      }
    } else {
      await this.showError(
        `Command not found: ${cmd}. Type 'help' for available commands.`,
      );
    }

    this.scrollToBottom();
  }

  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  scrollToBottom() {
    const container = document.getElementById("terminal-container");
    container.scrollTop = container.scrollHeight;
  }

  setupEventListeners() {
    let matchedIndex = 0;

    this.inputArea.addEventListener("keydown", async (e) => {
      if (e.key === "Enter" && !this.isTyping) {
        const cmd = this.inputArea.value;
        this.inputArea.value = "";
        await this.processCommand(cmd);
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        if (this.historyIndex > 0) {
          this.historyIndex--;
          this.inputArea.value = this.history[this.historyIndex];
        }

      } else if (e.key === "ArrowDown") {
        e.preventDefault();
        if (this.historyIndex < this.history.length - 1) {
          this.historyIndex++;
          this.inputArea.value = this.history[this.historyIndex];
        } else {
          this.historyIndex = this.history.length;
          this.inputArea.value = "";
        }
      }

      else if (e.key === "Tab") {
        e.preventDefault();

        const currentInput = this.inputArea.value.trim();
        if (currentInput === "") return;

        const matchingCommands = Object.keys(commands).filter((cmd) => 
          cmd.startsWith(currentInput.toLowerCase())
          );

        if (matchingCommands.length > 0) {
          this.inputArea.value =  matchingCommands[matchedIndex];
          matchedIndex = (matchedIndex + 1) % matchingCommands.length;
        }
      }
    });

    this.inputArea.addEventListener('input', () => {
      matchedIndex = 0;
    });

    document.addEventListener("click", () => {
      if (!this.isTyping) {
        this.inputArea.focus();
      }
    });

    document.querySelector(".terminal-close").addEventListener("click", () => {
      this.typeText(
        "Terminal cannot be closed. This is your life now. 😈",
        "error",
      );
    });

    document
      .querySelector(".terminal-maximize")
      .addEventListener("click", () => {
        document.documentElement.requestFullscreen().catch(() => {});
      });

    document
      .querySelector(".terminal-minimize")
      .addEventListener("click", () => {
        if (document.fullscreenElement) {
          document
            .exitFullscreen()
            .catch((err) =>
              console.error(`Error attempting to exit fullscreen: ${err}`),
            );
        }
      });
  }
}

function changeTheme(themeName) {
  const body = document.body;
  const theme = themes[themeName];
  const transition = document.querySelector(".theme-transition");

  transition.innerHTML = "";

  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*";
  const columns = Math.floor(window.innerWidth / 20);
  const rows = Math.floor(window.innerHeight / 20);

  for (let i = 0; i < columns; i++) {
    for (let j = 0; j < rows; j++) {
      const character = document.createElement("span");
      character.className = "theme-transition-character";
      character.style.left = `${i * 20}px`;
      character.style.top = `${j * 20}px`;
      character.style.animationDuration = `${Math.random() * 1 + 1.5}s`;
      character.style.animationDelay = `${Math.random() * 2}s`;
      character.textContent =
        characters[Math.floor(Math.random() * characters.length)];
      transition.appendChild(character);
    }
  }

  body.classList.add("theme-changing");

  // Apply theme changes
  requestAnimationFrame(() => {
    document.documentElement.style.setProperty(
      "--primary-color",
      theme.primary,
    );
    document.documentElement.style.setProperty(
      "--background-color",
      theme.background,
    );
    document.documentElement.style.setProperty("--font-color", theme.font);
    document.documentElement.style.setProperty(
      "--highlight-color",
      theme.highlight,
    );
  });

  document.querySelectorAll(".theme-button").forEach((button) => {
    button.classList.remove("active");
  });
  document
    .querySelector(`.theme-button[onclick*="${themeName}"]`)
    .classList.add("active");

  setTimeout(() => {
    body.classList.remove("theme-changing");
    transition.innerHTML = "";
  }, 2000);

  const themeButton = document.querySelector(`[onclick*="${themeName}"]`);
  themeButton.classList.add("theme-changed");
  setTimeout(() => {
    themeButton.classList.remove("theme-changed");
  }, 500);
}

// Initialize terminal and set default theme
const terminal = new Terminal();
document.addEventListener("DOMContentLoaded", () => {
  document
    .querySelector('.theme-button[onclick*="matrix"]')
    .classList.add("active");
});

